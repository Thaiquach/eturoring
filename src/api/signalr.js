// src/api/signalr.js
import * as signalR from '@microsoft/signalr';

let connection = null;
let isListenerRegistered = false;

export function connectToMessageHub(token, onReceiveMessage) {
  // N·∫øu ƒë√£ c√≥ connection th√¨ ch·ªâ c·∫ßn update l·∫°i callback
  if (connection) {
    // X√≥a callback c≈© (tr√°nh b·ªã gi·ªØ callback c≈© t·ª´ l·∫ßn mount tr∆∞·ªõc)
    connection.off("ReceiveMessage");

    // ƒêƒÉng k√Ω l·∫°i
    connection.on("ReceiveMessage", (senderId, content) => {
      console.log("üì© ReceiveMessage", senderId, content);
      onReceiveMessage({ senderId, content });
    });

    return connection;
  }
  connection = new signalR.HubConnectionBuilder()
    .withUrl('https://localhost:7050/MessageHub', {
      accessTokenFactory: () => token
    })
    .withAutomaticReconnect()
    .build();
  // üßπ X√≥a listener c≈© tr∆∞·ªõc khi th√™m m·ªõi
  connection.off("ReceiveMessage");
  // ‚úÖ lu√¥n ƒëƒÉng k√Ω callback m·ªõi (off tr∆∞·ªõc tr√°nh nh√¢n b·∫£n)
  connection.on("ReceiveMessage", (senderId, content) => {
    console.log("üì© ReceiveMessage", senderId, content);
    onReceiveMessage({ senderId, content });
  });
  isListenerRegistered = true;

  connection.onreconnecting(() => {
    console.warn('üîÑ ƒêang k·∫øt n·ªëi l·∫°i v·ªõi SignalR...');
  });

  connection.onreconnected(() => {
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng v·ªõi SignalR');
  });

  connection.start()
    .then(() => console.log('‚úÖ ƒê√£ k·∫øt n·ªëi SignalR'))
    .catch((err) => console.error('‚ùå L·ªói k·∫øt n·ªëi SignalR:', err));
  return connection;
}
export function stopSignalR() {
  if (connection) {
    connection.stop();
    connection = null;
    isListenerRegistered = false; // ‚úÖ reset flag ƒë·ªÉ cho ph√©p k·∫øt n·ªëi l·∫°i
  }
}
